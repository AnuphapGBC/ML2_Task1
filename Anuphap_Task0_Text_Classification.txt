Best:

| Algorithm           | Feature Extractor   |   Best Score |   Execution Time | Best Parameters|
+=====================+=====================+==============+==================+==============================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================+
| Logistic Regression | N-grams             |     0.945165 |          4.19816 | {'memory': None, 'steps': [('vect', CountVectorizer(ngram_range=(1, 2))), ('clf', LogisticRegression())], 'verbose': False, 'vect': CountVectorizer(ngram_range=(1, 2)), 'clf': LogisticRegression(), 'vect__analyzer': 'word', 'vect__binary': False, 'vect__decode_error': 'strict', 'vect__dtype': <class 'numpy.int64'>, 'vect__encoding': 'utf-8', 'vect__input': 'content', 'vect__lowercase': True, 'vect__max_df': 1.0, 'vect__max_features': None, 'vect__min_df': 1, 'vect__ngram_range': (1, 2), 'vect__preprocessor': None, 'vect__stop_words': None, 'vect__strip_accents': None, 'vect__token_pattern': '(?u)\\b\\w\\w+\\b', 'vect__tokenizer': None, 'vect__vocabulary': None, 'clf__C': 1.0, 'clf__class_weight': None, 'clf__dual': False, 'clf__fit_intercept': True, 'clf__intercept_scaling': 1, 'clf__l1_ratio': None, 'clf__max_iter': 100, 'clf__multi_class': 'auto', 'clf__n_jobs': None, 'clf__penalty': 'l2', 'clf__random_state': None, 'clf__solver': 'lbfgs', 'clf__tol': 0.0001, 'clf__verbose': 0, 'clf__warm_start': False} |


All Possibles:

| Algorithm               | Feature Extractor   |   Best Score |   Execution Time | Best Parameters|

| Multinomial Na√Øve Bayes | Bag-of-Words        |     0.931164 |         1.04459  | {'memory': None, 'steps': [('vect', CountVectorizer()), ('clf', MultinomialNB())], 'verbose': False, 'vect': CountVectorizer(), 'clf': MultinomialNB(), 'vect__analyzer': 'word', 'vect__binary': False, 'vect__decode_error': 'strict', 'vect__dtype': <class 'numpy.int64'>, 'vect__encoding': 'utf-8', 'vect__input': 'content', 'vect__lowercase': True, 'vect__max_df': 1.0, 'vect__max_features': None, 'vect__min_df': 1, 'vect__ngram_range': (1, 1), 'vect__preprocessor': None, 'vect__stop_words': None, 'vect__strip_accents': None, 'vect__token_pattern': '(?u)\\b\\w\\w+\\b', 'vect__tokenizer': None, 'vect__vocabulary': None, 'clf__alpha': 1.0, 'clf__class_prior': None, 'clf__fit_prior': True, 'clf__force_alpha': 'warn'}                                                                                                                                                                                                                                                                                                             |

| Multinomial Na√Øve Bayes | N-grams             |     0.936971 |         1.02974  | {'memory': None, 'steps': [('vect', CountVectorizer(ngram_range=(1, 2))), ('clf', MultinomialNB())], 'verbose': False, 'vect': CountVectorizer(ngram_range=(1, 2)), 'clf': MultinomialNB(), 'vect__analyzer': 'word', 'vect__binary': False, 'vect__decode_error': 'strict', 'vect__dtype': <class 'numpy.int64'>, 'vect__encoding': 'utf-8', 'vect__input': 'content', 'vect__lowercase': True, 'vect__max_df': 1.0, 'vect__max_features': None, 'vect__min_df': 1, 'vect__ngram_range': (1, 2), 'vect__preprocessor': None, 'vect__stop_words': None, 'vect__strip_accents': None, 'vect__token_pattern': '(?u)\\b\\w\\w+\\b', 'vect__tokenizer': None, 'vect__vocabulary': None, 'clf__alpha': 1.0, 'clf__class_prior': None, 'clf__fit_prior': True, 'clf__force_alpha': 'warn'}                                                                                                                                                                                                                                                                         |

| Multinomial Na√Øve Bayes | word2vec            |     0.560098 |         0.277165 | {'memory': None, 'steps': [('vect', Word2VecTransformer(model=<gensim.models.word2vec.Word2Vec object at 0x16e5bfa50>)), ('clf', MultinomialNB())], 'verbose': False, 'vect': Word2VecTransformer(model=<gensim.models.word2vec.Word2Vec object at 0x16e5bfa50>), 'clf': MultinomialNB(), 'vect__model': <gensim.models.word2vec.Word2Vec object at 0x16e5bfa50>, 'clf__alpha': 1.0, 'clf__class_prior': None, 'clf__fit_prior': True, 'clf__force_alpha': 'warn'}|

| Multinomial Na√Øve Bayes | doc2vec             |     0.70359  |         9.18207  | {'memory': None, 'steps': [('vect', Doc2VecTransformer(model=<gensim.models.doc2vec.Doc2Vec object at 0x16d4b0a50>)), ('clf', MultinomialNB())], 'verbose': False, 'vect': Doc2VecTransformer(model=<gensim.models.doc2vec.Doc2Vec object at 0x16d4b0a50>), 'clf': MultinomialNB(), 'vect__model': <gensim.models.doc2vec.Doc2Vec object at 0x16d4b0a50>, 'clf__alpha': 1.0, 'clf__class_prior': None, 'clf__fit_prior': True, 'clf__force_alpha': 'warn'}|

| Logistic Regression     | Bag-of-Words        |     0.939317 |         0.801389 | {'memory': None, 'steps': [('vect', CountVectorizer()), ('clf', LogisticRegression())], 'verbose': False, 'vect': CountVectorizer(), 'clf': LogisticRegression(), 'vect__analyzer': 'word', 'vect__binary': False, 'vect__decode_error': 'strict', 'vect__dtype': <class 'numpy.int64'>, 'vect__encoding': 'utf-8', 'vect__input': 'content', 'vect__lowercase': True, 'vect__max_df': 1.0, 'vect__max_features': None, 'vect__min_df': 1, 'vect__ngram_range': (1, 1), 'vect__preprocessor': None, 'vect__stop_words': None, 'vect__strip_accents': None, 'vect__token_pattern': '(?u)\\b\\w\\w+\\b', 'vect__tokenizer': None, 'vect__vocabulary': None, 'clf__C': 1.0, 'clf__class_weight': None, 'clf__dual': False, 'clf__fit_intercept': True, 'clf__intercept_scaling': 1, 'clf__l1_ratio': None, 'clf__max_iter': 100, 'clf__multi_class': 'auto', 'clf__n_jobs': None, 'clf__penalty': 'l2', 'clf__random_state': None, 'clf__solver': 'lbfgs', 'clf__tol': 0.0001, 'clf__verbose': 0, 'clf__warm_start': False}                                     |

| Logistic Regression     | N-grams             |     0.945165 |         4.19816  | {'memory': None, 'steps': [('vect', CountVectorizer(ngram_range=(1, 2))), ('clf', LogisticRegression())], 'verbose': False, 'vect': CountVectorizer(ngram_range=(1, 2)), 'clf': LogisticRegression(), 'vect__analyzer': 'word', 'vect__binary': False, 'vect__decode_error': 'strict', 'vect__dtype': <class 'numpy.int64'>, 'vect__encoding': 'utf-8', 'vect__input': 'content', 'vect__lowercase': True, 'vect__max_df': 1.0, 'vect__max_features': None, 'vect__min_df': 1, 'vect__ngram_range': (1, 2), 'vect__preprocessor': None, 'vect__stop_words': None, 'vect__strip_accents': None, 'vect__token_pattern': '(?u)\\b\\w\\w+\\b', 'vect__tokenizer': None, 'vect__vocabulary': None, 'clf__C': 1.0, 'clf__class_weight': None, 'clf__dual': False, 'clf__fit_intercept': True, 'clf__intercept_scaling': 1, 'clf__l1_ratio': None, 'clf__max_iter': 100, 'clf__multi_class': 'auto', 'clf__n_jobs': None, 'clf__penalty': 'l2', 'clf__random_state': None, 'clf__solver': 'lbfgs', 'clf__tol': 0.0001, 'clf__verbose': 0, 'clf__warm_start': False} |

| Logistic Regression     | word2vec            |     0.560098 |         0.344876 | {'memory': None, 'steps': [('vect', Word2VecTransformer(model=<gensim.models.word2vec.Word2Vec object at 0x16e32fa50>)), ('clf', LogisticRegression())], 'verbose': False, 'vect': Word2VecTransformer(model=<gensim.models.word2vec.Word2Vec object at 0x16e32fa50>), 'clf': LogisticRegression(), 'vect__model': <gensim.models.word2vec.Word2Vec object at 0x16e32fa50>, 'clf__C': 1.0, 'clf__class_weight': None, 'clf__dual': False, 'clf__fit_intercept': True, 'clf__intercept_scaling': 1, 'clf__l1_ratio': None, 'clf__max_iter': 100, 'clf__multi_class': 'auto', 'clf__n_jobs': None, 'clf__penalty': 'l2', 'clf__random_state': None, 'clf__solver': 'lbfgs', 'clf__tol': 0.0001, 'clf__verbose': 0, 'clf__warm_start': False}                                                                                                                                                                                                                                                                                                                   |

| Logistic Regression     | doc2vec             |     0.715313 |         9.55984  | {'memory': None, 'steps': [('vect', Doc2VecTransformer(model=<gensim.models.doc2vec.Doc2Vec object at 0x288b61ad0>)), ('clf', LogisticRegression())], 'verbose': False, 'vect': Doc2VecTransformer(model=<gensim.models.doc2vec.Doc2Vec object at 0x288b61ad0>), 'clf': LogisticRegression(), 'vect__model': <gensim.models.doc2vec.Doc2Vec object at 0x288b61ad0>, 'clf__C': 1.0, 'clf__class_weight': None, 'clf__dual': False, 'clf__fit_intercept': True, 'clf__intercept_scaling': 1, 'clf__l1_ratio': None, 'clf__max_iter': 100, 'clf__multi_class': 'auto', 'clf__n_jobs': None, 'clf__penalty': 'l2', 'clf__random_state': None, 'clf__solver': 'lbfgs', 'clf__tol': 0.0001, 'clf__verbose': 0, 'clf__warm_start': False}                                                                                                                                                                                                                                                                                                                           |

| Support Vector Machines | Bag-of-Words        |     0.716456 |         1.52789  | {'memory': None, 'steps': [('vect', CountVectorizer()), ('clf', SVC())], 'verbose': False, 'vect': CountVectorizer(), 'clf': SVC(), 'vect__analyzer': 'word', 'vect__binary': False, 'vect__decode_error': 'strict', 'vect__dtype': <class 'numpy.int64'>, 'vect__encoding': 'utf-8', 'vect__input': 'content', 'vect__lowercase': True, 'vect__max_df': 1.0, 'vect__max_features': None, 'vect__min_df': 1, 'vect__ngram_range': (1, 1), 'vect__preprocessor': None, 'vect__stop_words': None, 'vect__strip_accents': None, 'vect__token_pattern': '(?u)\\b\\w\\w+\\b', 'vect__tokenizer': None, 'vect__vocabulary': None, 'clf__C': 1.0, 'clf__break_ties': False, 'clf__cache_size': 200, 'clf__class_weight': None, 'clf__coef0': 0.0, 'clf__decision_function_shape': 'ovr', 'clf__degree': 3, 'clf__gamma': 'scale', 'clf__kernel': 'rbf', 'clf__max_iter': -1, 'clf__probability': False, 'clf__random_state': None, 'clf__shrinking': True, 'clf__tol': 0.001, 'clf__verbose': False}                                                                |

| Support Vector Machines | N-grams             |     0.780593 |         3.84988  | {'memory': None, 'steps': [('vect', CountVectorizer(ngram_range=(1, 2))), ('clf', SVC())], 'verbose': False, 'vect': CountVectorizer(ngram_range=(1, 2)), 'clf': SVC(), 'vect__analyzer': 'word', 'vect__binary': False, 'vect__decode_error': 'strict', 'vect__dtype': <class 'numpy.int64'>, 'vect__encoding': 'utf-8', 'vect__input': 'content', 'vect__lowercase': True, 'vect__max_df': 1.0, 'vect__max_features': None, 'vect__min_df': 1, 'vect__ngram_range': (1, 2), 'vect__preprocessor': None, 'vect__stop_words': None, 'vect__strip_accents': None, 'vect__token_pattern': '(?u)\\b\\w\\w+\\b', 'vect__tokenizer': None, 'vect__vocabulary': None, 'clf__C': 1.0, 'clf__break_ties': False, 'clf__cache_size': 200, 'clf__class_weight': None, 'clf__coef0': 0.0, 'clf__decision_function_shape': 'ovr', 'clf__degree': 3, 'clf__gamma': 'scale', 'clf__kernel': 'rbf', 'clf__max_iter': -1, 'clf__probability': False, 'clf__random_state': None, 'clf__shrinking': True, 'clf__tol': 0.001, 'clf__verbose': False}                            |

| Support Vector Machines | word2vec            |     0.560098 |         0.275864 | {'memory': None, 'steps': [('vect', Word2VecTransformer(model=<gensim.models.word2vec.Word2Vec object at 0x2899ebf10>)), ('clf', SVC())], 'verbose': False, 'vect': Word2VecTransformer(model=<gensim.models.word2vec.Word2Vec object at 0x2899ebf10>), 'clf': SVC(), 'vect__model': <gensim.models.word2vec.Word2Vec object at 0x2899ebf10>, 'clf__C': 1.0, 'clf__break_ties': False, 'clf__cache_size': 200, 'clf__class_weight': None, 'clf__coef0': 0.0, 'clf__decision_function_shape': 'ovr', 'clf__degree': 3, 'clf__gamma': 'scale', 'clf__kernel': 'rbf', 'clf__max_iter': -1, 'clf__probability': False, 'clf__random_state': None, 'clf__shrinking': True, 'clf__tol': 0.001, 'clf__verbose': False}                                                                                                                                                                                                                                                                                                                                              |

| Support Vector Machines | doc2vec             |     0.728131 |         9.42871  | {'memory': None, 'steps': [('vect', Doc2VecTransformer(model=<gensim.models.doc2vec.Doc2Vec object at 0x16e7c5790>)), ('clf', SVC())], 'verbose': False, 'vect': Doc2VecTransformer(model=<gensim.models.doc2vec.Doc2Vec object at 0x16e7c5790>), 'clf': SVC(), 'vect__model': <gensim.models.doc2vec.Doc2Vec object at 0x16e7c5790>, 'clf__C': 1.0, 'clf__break_ties': False, 'clf__cache_size': 200, 'clf__class_weight': None, 'clf__coef0': 0.0, 'clf__decision_function_shape': 'ovr', 'clf__degree': 3, 'clf__gamma': 'scale', 'clf__kernel': 'rbf', 'clf__max_iter': -1, 'clf__probability': False, 'clf__random_state': None, 'clf__shrinking': True, 'clf__tol': 0.001, 'clf__verbose': False}                                                                                                                                                                                                                                                                                                                                                      |

| Decision Trees          | Bag-of-Words        |     0.88795  |         0.566472 | {'memory': None, 'steps': [('vect', CountVectorizer()), ('clf', DecisionTreeClassifier())], 'verbose': False, 'vect': CountVectorizer(), 'clf': DecisionTreeClassifier(), 'vect__analyzer': 'word', 'vect__binary': False, 'vect__decode_error': 'strict', 'vect__dtype': <class 'numpy.int64'>, 'vect__encoding': 'utf-8', 'vect__input': 'content', 'vect__lowercase': True, 'vect__max_df': 1.0, 'vect__max_features': None, 'vect__min_df': 1, 'vect__ngram_range': (1, 1), 'vect__preprocessor': None, 'vect__stop_words': None, 'vect__strip_accents': None, 'vect__token_pattern': '(?u)\\b\\w\\w+\\b', 'vect__tokenizer': None, 'vect__vocabulary': None, 'clf__ccp_alpha': 0.0, 'clf__class_weight': None, 'clf__criterion': 'gini', 'clf__max_depth': None, 'clf__max_features': None, 'clf__max_leaf_nodes': None, 'clf__min_impurity_decrease': 0.0, 'clf__min_samples_leaf': 1, 'clf__min_samples_split': 2, 'clf__min_weight_fraction_leaf': 0.0, 'clf__random_state': None, 'clf__splitter': 'best'}                                          |
+-------------------------+---------------------+--------------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Decision Trees          | N-grams             |     0.880953 |         2.16494  | {'memory': None, 'steps': [('vect', CountVectorizer(ngram_range=(1, 2))), ('clf', DecisionTreeClassifier())], 'verbose': False, 'vect': CountVectorizer(ngram_range=(1, 2)), 'clf': DecisionTreeClassifier(), 'vect__analyzer': 'word', 'vect__binary': False, 'vect__decode_error': 'strict', 'vect__dtype': <class 'numpy.int64'>, 'vect__encoding': 'utf-8', 'vect__input': 'content', 'vect__lowercase': True, 'vect__max_df': 1.0, 'vect__max_features': None, 'vect__min_df': 1, 'vect__ngram_range': (1, 2), 'vect__preprocessor': None, 'vect__stop_words': None, 'vect__strip_accents': None, 'vect__token_pattern': '(?u)\\b\\w\\w+\\b', 'vect__tokenizer': None, 'vect__vocabulary': None, 'clf__ccp_alpha': 0.0, 'clf__class_weight': None, 'clf__criterion': 'gini', 'clf__max_depth': None, 'clf__max_features': None, 'clf__max_leaf_nodes': None, 'clf__min_impurity_decrease': 0.0, 'clf__min_samples_leaf': 1, 'clf__min_samples_split': 2, 'clf__min_weight_fraction_leaf': 0.0, 'clf__random_state': None, 'clf__splitter': 'best'}      |

| Decision Trees          | word2vec            |     0.560098 |         0.209908 | {'memory': None, 'steps': [('vect', Word2VecTransformer(model=<gensim.models.word2vec.Word2Vec object at 0x28baac510>)), ('clf', DecisionTreeClassifier())], 'verbose': False, 'vect': Word2VecTransformer(model=<gensim.models.word2vec.Word2Vec object at 0x28baac510>), 'clf': DecisionTreeClassifier(), 'vect__model': <gensim.models.word2vec.Word2Vec object at 0x28baac510>, 'clf__ccp_alpha': 0.0, 'clf__class_weight': None, 'clf__criterion': 'gini', 'clf__max_depth': None, 'clf__max_features': None, 'clf__max_leaf_nodes': None, 'clf__min_impurity_decrease': 0.0, 'clf__min_samples_leaf': 1, 'clf__min_samples_split': 2, 'clf__min_weight_fraction_leaf': 0.0, 'clf__random_state': None, 'clf__splitter': 'best'}                                                                                                                                                                                                                                                                                                                        |

| Decision Trees          | doc2vec             |     0.644145 |        10.0113   | {'memory': None, 'steps': [('vect', Doc2VecTransformer(model=<gensim.models.doc2vec.Doc2Vec object at 0x2886f4b10>)), ('clf', DecisionTreeClassifier())], 'verbose': False, 'vect': Doc2VecTransformer(model=<gensim.models.doc2vec.Doc2Vec object at 0x2886f4b10>), 'clf': DecisionTreeClassifier(), 'vect__model': <gensim.models.doc2vec.Doc2Vec object at 0x2886f4b10>, 'clf__ccp_alpha': 0.0, 'clf__class_weight': None, 'clf__criterion': 'gini', 'clf__max_depth': None, 'clf__max_features': None, 'clf__max_leaf_nodes': None, 'clf__min_impurity_decrease': 0.0, 'clf__min_samples_leaf': 1, 'clf__min_samples_split': 2, 'clf__min_weight_fraction_leaf': 0.0, 'clf__random_state': None, 'clf__splitter': 'best'}                                                                                                                                                                                                                                                                                                                                |
+-------------------------+---------------------+--------------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+